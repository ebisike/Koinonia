// <auto-generated />
using System;
using Koinonia.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Koinonia.Infra.Data.Migrations
{
    [DbContext(typeof(KoinoniaDbContext))]
    partial class KoinoniaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Koinonia.Domain.Models.Comments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCommented")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TestimoniesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestimonyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Usercomment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("PostId");

                    b.HasIndex("TestimoniesId");

                    b.HasIndex("UsersId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Koinonia.Domain.Models.Followers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("Koinonia.Domain.Models.KoinoniaUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stateOfOrigin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("KoinoniaUsers");
                });

            modelBuilder.Entity("Koinonia.Domain.Models.Likes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateLiked")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestimonyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("postsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("TestimonyId");

                    b.HasIndex("UsersId");

                    b.HasIndex("postsId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("Koinonia.Domain.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Koinonia.Domain.Models.Posts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Koinonia.Domain.Models.Testimonies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Testimony");
                });

            modelBuilder.Entity("Koinonia.Domain.Models.Comments", b =>
                {
                    b.HasOne("Koinonia.Domain.Models.News", "News")
                        .WithMany("NewsComments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Koinonia.Domain.Models.Posts", "post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Koinonia.Domain.Models.Testimonies", "Testimonies")
                        .WithMany("TestimonyComments")
                        .HasForeignKey("TestimoniesId");

                    b.HasOne("Koinonia.Domain.Models.KoinoniaUsers", "Users")
                        .WithMany("UserComments")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("Koinonia.Domain.Models.Followers", b =>
                {
                    b.HasOne("Koinonia.Domain.Models.KoinoniaUsers", "Users")
                        .WithMany("UserFollowers")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("Koinonia.Domain.Models.Likes", b =>
                {
                    b.HasOne("Koinonia.Domain.Models.News", "News")
                        .WithMany("NewsLikes")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Koinonia.Domain.Models.Testimonies", "Testimony")
                        .WithMany("TestimonyLikes")
                        .HasForeignKey("TestimonyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Koinonia.Domain.Models.KoinoniaUsers", "Users")
                        .WithMany("UserLikes")
                        .HasForeignKey("UsersId");

                    b.HasOne("Koinonia.Domain.Models.Posts", "posts")
                        .WithMany("PostLikes")
                        .HasForeignKey("postsId");
                });

            modelBuilder.Entity("Koinonia.Domain.Models.News", b =>
                {
                    b.HasOne("Koinonia.Domain.Models.KoinoniaUsers", "User")
                        .WithMany("UserNews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Koinonia.Domain.Models.Posts", b =>
                {
                    b.HasOne("Koinonia.Domain.Models.KoinoniaUsers", "User")
                        .WithMany("UserPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Koinonia.Domain.Models.Testimonies", b =>
                {
                    b.HasOne("Koinonia.Domain.Models.KoinoniaUsers", "User")
                        .WithMany("UserTestimonies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
